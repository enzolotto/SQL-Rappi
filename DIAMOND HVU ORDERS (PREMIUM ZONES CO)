SELECT 
  value_bucket,
  m.ZONE,
  COALESCE(M.CITY,SK.CITY) AS CITIES,
  D.STOREKEEPER_ID,
  D.LEVEL,
  D.TRANSPORT_MEDIA_TYPE AS VEHICLE,
  DATE_TRUNC(WEEK,m.CREATED_AT)::DATE AS ORDER_WEEK,
  COUNT (DISTINCT M.ORDER_ID) AS HVU_ORDERS,
  SUM (HVU_ORDERS) OVER (PARTITION BY m.ZONE, CITIES, VALUE_BUCKET, ORDER_WEEK) AS TOTAL_HVU_ZONE,
  HVU_ORDERS/TOTAL_HVU_ZONE AS PERC_ZONE
  FROM co_writable.gortallordersmaster m
  JOIN CO_PG_MS_CPGOPS_ORDERS_MS_PUBLIC.ORDER_SUMMARY os ON OS.ORDER_ID = M.ORDER_ID
  join CO_PG_MS_STOREKEEPERS_PUBLIC.storekeepers_ofuscated SK ON SK.ID = M.STOREKEEPER_ID
  JOIN CO_PG_MS_SK_SCORE_HISTORY_PUBLIC.SK_LEVEL S ON S.STOREKEEPER_ID = SK.ID
  JOIN CO_PG_MS_SK_SCORE_HISTORY_PUBLIC.LEVEL L ON S.LEVEL_ID = L.ID
  JOIN (select distinct
          application_user_id,
                COUNTRY_CODE,
          case
            when FINANCE_USER_TYPE IN ('HQ_NEW','POTENTIAL_HQ_RET','HQ_RET_HIGH_CHURN','OTHER_NEW') then 'High'
            else 'Low' end
              as value_bucket
        from cpgs_datascience.dm_user_characterization) HVU ON HVU.APPLICATION_USER_ID = M.APPLICATION_USER_ID AND HVU.COUNTRY_CODE = M.COUNTRY
  JOIN (SELECT distinct
       week,
       LEVEL,
       transport_media_type,
       city,
       storekeeper_id
FROM (SELECT
  DATE_TRUNC('week', o.created_at::DATE) AS week,
  o.order_id,
  o.country,
  d.storekeeper_id,
  IFNULL(s.level_name, 'rookie') AS level,
    s.transport_media_type,
    s.city
FROM
  global_finances.global_orders o
  JOIN global_finances.global_order_details d
  ON o.order_id = d.order_id AND o.country = d.country
  LEFT JOIN (
SELECT
      'CO' AS country,
      s.storekeeper_id,
      s.created_at::TIMESTAMP_NTZ AS starts_at,
      LEAD(starts_at, 1, CURRENT_TIMESTAMP::TIMESTAMP_NTZ) OVER (PARTITION BY s.storekeeper_id ORDER BY s.created_at) AS ends_at,
      l.level_name,
            sk.transport_media_type,
            sk.city
    FROM CO_pg_ms_sk_score_history_public.sk_level s
        LEFT JOIN CO_pg_ms_sk_score_history_public.level l
        ON s.level_id = l.id
        LEFT JOIN CO_PG_MS_STOREKEEPERS_PUBLIC.storekeepers_ofuscated SK
        ON sk.id = s.storekeeper_id
    QUALIFY
      ends_at::DATE >= '2020-12-28') s ON o.country = s.country AND d.storekeeper_id = s.storekeeper_id AND o.created_at::TIMESTAMP_NTZ BETWEEN s.starts_at AND s.ends_at
WHERE
  o.created_at::DATE >= '2020-12-28'
  AND o.order_state IN ('finished', 'pending_review')
    AND O.COUNTRY = 'CO'
 ) 
 WHERE  LEVEL = 'diamond'
-- AND CITY IN ('Belo Horizonte','Sao Paulo','Rio de Janeiro')
-- GROUP BY 1,2,3
   
) d on d.storekeeper_id = coalesce(m.storekeeper_id, m.shopper_id)

  WHERE DATEDIFF(WEEK,ORDER_WEEK,DATE_TRUNC(WEEK,CURRENT_TIMESTAMP))< 6
  AND M.ORDER_STATE IN ('finished','pending_review')
  --AND m.SUB_GROUP = 'Super'
  AND CITIES ILIKE ANY ('bogotá','medell_n','cali')
  AND VALUE_BUCKET ILIKE ('high')
  AND ZONE IS NOT NULL
  AND CITIES IS NOT NULL
  AND ZONE IN ('La Candelaria','Usaquen','Chapinero','Fontibon','Teusaquillo','Barrios Unidos','Sur','Cedritos','Antonio Nariño','Engativá','San Fernando','Oeste','Norte','Poblado','Belen')
  GROUP BY 1,2,3,4,5,6,7
  order by order_week desc, HVU_ORDERS DESC
  
  --cpgs_datascience.dm_user_characterization
  --select distinct zone_name, zone_id from  mx_writable.mx_zones  limit 1000 (49,4,12,26,27,64)
  --zone 1368, 315
  
  
  --select distinct city from co_writable.gortallordersmaster  limit 100
